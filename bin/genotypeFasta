#!/bin/bash

# Define usage function
usage() {
    echo " Influenza Segments Genotyper, by Gautier Richard, 30/11/2023.
 Genotypes segments of IAV strains/samples stored in a single fasta file using a database fasta file with specific headers formats.
 Requires SeqKit and BLAST to be installed in your current environment.
 
 BLAST is recommended to be installed in your OS directly, conda installations of BLAST can be slower.

 An internal check is made to ensure that the genotypes called are accurate. This works by comparing the clade of the best match versus the clade of the other 9 best matches.
 The potential thrown errors in the *.log file can thus simply be due to how the database is made (not enough consistent best matches for a single clade).
 
 The tool can work for virutally any influenza A sequence (human, avian, swine...).  What matters is the quality of annotation of your database, see below.

 Database annotation is not performed by this tool, this should be done by careful phylogenetic analyses.

 This tool outputs two files:
    .genotyped.fasta ; which contains the input fasta sequences with the clades of each segment added at the end of the headers in the format : |genotype
    .genotyped.log ; which contains a summary of the blast results for each sequence, with potentially erroneous genotypes attributions at the start of the file. 

 Usage: $0 
    
    [ -f ] FASTA file name. Mandatory. Example: -f sequences.fasta
    Fasta headers require a specific format. They must end by `_Segment`, with Segment being one of: PB2, PB1, PA, HA, NP, NA, NS, M or MP.
	
	Example:
	A/swine/France/35-210231/2021_PB2

    [ -d ] Fasta file containing IAV segments clades classification. A BLAST database is made from this file using makeblastdb. 
	Fasta headers must have a specific format: >sequence/name;Genotype_info-Segment-Genotype_name_that_will_be_imported

    Example:
    >A/sw/France/22-195423/2019;H1N1pdm-HA-1A.3.3.2

    If a sequence matches this entry, it will assign 1A.3.3.2 as a clade, i.e. what is after HA-, NA-, PB2-, PB1-, PA-, NP-, NS-, M- / MP- in the fasta headers of the database.
    The sequence name or the genotype present before the -HA doesn't matter, that is a useful field for you to better annotate the sequences (HxNx subtypes, etc).
    The quality of the database is of utmost importance to insure good genotyping of IAV sequences.

    [ -o ] Output prefix. Example: seq ; this will produce seq.genotyped.fasta and seq.genotyped.log.

    [ -h ] Prints help."
}

# Set default values for arguments
arg_s=""

# Parse arguments with getopt
while getopts "f:d:o::h" opt; do
  case $opt in
    f)
      arg_f="${OPTARG}"
      ;;
    d)
      arg_d="${OPTARG}"
      ;;
    o)
      arg_o="${OPTARG}"
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done

# Check if arg_f is empty
if [ -z "$arg_f" ]; then
  echo "[ ERROR  ] No input fasta file provided. Example: $0 -f fasta_input_file.fasta"
  usage
  exit 1
fi

if [ -z "$arg_o" ]; then
  echo "[ ERROR  ] No output prefix provided. Example: $0 -o sample45"
  usage
  exit 1
fi

if [ -z "$arg_d" ]; then
  echo "[ ERROR  ] No database provided. Example: $0 -d annotated_db"
  usage
  exit 1
fi


START=$(date +%s)
time=$(date)

echo "[INFO] Genotyping Influenza A segments for each strain (A/text/text/characters/4digits_gene)."
echo "[INFO] Genes must be of format: HA NA PB2 PB1 PA NP NS M (or MP)"
echo "[INFO] Fasta file analysed: $arg_f"

name="$(basename ${arg_f} .fasta)"
name="$(basename $name .fa)"

seqkit faidx ${arg_f}
seqkit rmdup -i -n -d ${arg_o}.dup.fasta ${arg_f} > ${arg_o}.rmdup.fasta 

echo "[INFO] Generating the BlastDB from fasta file: $arg_d"
makeblastdb -in ${arg_d} -dbtype nucl

echo "[INFO] Duplicated sequences in the query fasta will be treated at the end of the pipeline"

seq_names=$(grep ">" ${arg_o}.rmdup.fasta)

echo "" > ${arg_o}.genotyped.fasta
echo "Success	SeqName	Genotype	Identity	ConsistentMatches" > ${arg_o}.genotyped.log

function BLAST_sequences {
        seq_name=$(echo $l | sed 's;>;;g')
        echo "[INFO] Processing $seq_name"
	seq=$(seqkit grep -r -p "$seq_name" ${arg_o}.tmp.fasta)
	content=$(blastn -db ${arg_d} -outfmt 7 -query  <(echo "$seq") -max_target_seqs 10 -num_threads 10 | sed '/^#.*/d' | sort -u -k2,2 | sort -k3,3rn)
        echo "$content"
        header_genotyped=$(echo "$content" | sed -e 's;_PB2\t.*PB2-;_PB2|;g' -e 's;_PB1\t.*PB1-;_PB1|;g' -e 's;_PA\t.*PA-;_PA|;g' -e 's;_HA\t.*HA-;_HA|;g' -e 's;_NP\t.*NP-;_NP|;g' -e 's;_NA\t.*NA-;_NA|;g' -e 's;_NS\t.*NS-;_NS|;g' -e 's;_MP\t.*MP-;_MP|;g' -e 's;_MP\t.*-M-;_MP|;g' -e 's;_M\t.*MP-;_MP|;g' -e 's;_M\t.*-M-;_MP|;g' -e 's;\t.*;;g' | head -n 1)
        identity=$(echo "$content" | head -n 1 | awk '{print $3}')
	matches=$(echo "$content" | awk '{print $2}' | sed -e 's;.*PB2;PB2;g' -e 's;.*PB1;PB1;g' -e 's;.*PA;PA;g' -e 's;.*HA;HA;g' -e 's;.*NP;NP;g' -e 's;.*NA;NA;g' -e 's;.*NS;NS;g' -e 's;.*-M;M;g' -e 's;.*MP;MP;g' )
	best_match=$(echo "$matches" | head -n 1)
	good_matches_number=$(echo "$matches" | grep $best_match$ | wc -l)
	echo "$header_genotyped"
        var=$(echo "$header_genotyped" | sed 's/\//\\\//g')
        if (( $(echo "$identity > 80" | bc -l) )); then
		if (( $(echo "$good_matches_number >= 3" | bc -l) )); then
                	echo "[OK] $seq_name | Genotype found based on $good_matches_number consistent matches with a max identity of $identity%: $best_match"
			echo "[OK]	$seq_name	$best_match	$identity	$good_matches_number" >> ${arg_o}.genotyped.log
			echo "Exporting sequence $header_genotyped"
                	sed "s;>.*;>$var;g" <(echo "$seq") >> ${arg_o}.genotyped.fasta
                	echo ""
		else
			echo "[ERR] $seq_name | Genotype found based on less than $good_matches_number consistent matches with max identity of $identity% identity: $best_match"
			echo "[ERR]	$seq_name	$best_match	$identity	$good_matches_number" >> ${arg_o}.genotyped.log
			sed "s;>.*;>$var;g" <(echo "$seq") >> ${arg_o}.genotyped.fasta
		fi

        else
		echo "[ERR] $seq_name | Genotype found based on $good_matches_number consitent matches with a max identity of only $identity% (probably too low): $best_match"
		echo "[ERR]	$seq_name	$best_match	$identity	$good_matches_number" >> ${arg_o}.genotyped.log
                sed "s;>.*;>$var;g" <(echo "$seq") >> ${arg_o}.genotyped.fasta
        fi
}

cp ${arg_o}.rmdup.fasta ${arg_o}.tmp.fasta
echo "$seq_names" | while read -r l; do
	BLAST_sequences
done

echo "[INFO] Processing duplicated sequences"

dup_names=$(grep ">" ${arg_o}.dup.fasta)
cp ${arg_o}.dup.fasta ${arg_o}.tmp.fasta

echo "$dup_names"

if [ -z "$dup_names" ]
then
	echo "[INFO] No duplicated sequences"
else
	echo "$dup_names" | while read -r l; do
		BLAST_sequences
	done

	rm ${arg_o}.tmp.fasta ${arg_o}.dup.fasta ${arg_o}.rmdup.fasta
	sort ${arg_o}.genotyped.log > ${arg_o}.genotyped.tmp.log
	mv ${arg_o}.genotyped.tmp.log ${arg_o}.genotyped.log
fi

END=$(date +%s);
time=$(echo $((END-START)) | awk '{print int($1/60)"min and "int($1%60)"sec"}')
echo "[INFO] Finished in $time."

